package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Storage represents a row from 'public.storage'.
type Storage struct {
	ID        int64          `json:"id"`         // id
	Cid       sql.NullString `json:"cid"`        // cid
	UserID    sql.NullInt64  `json:"user_id"`    // user_id
	Name      string         `json:"name"`       // name
	Public    bool           `json:"public"`     // public
	Local     bool           `json:"local"`      // local
	LocalPath sql.NullString `json:"local_path"` // local_path
	Hash      sql.NullString `json:"hash"`       // hash
	Pinned    sql.NullBool   `json:"pinned"`     // pinned
	CreatedAt time.Time      `json:"created_at"` // created_at
	UpdatedAt time.Time      `json:"updated_at"` // updated_at
	DeletedAt sql.NullTime   `json:"deleted_at"` // deleted_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Storage exists in the database.
func (s *Storage) Exists() bool {
	return s._exists
}

// Deleted returns true when the Storage has been marked for deletion from
// the database.
func (s *Storage) Deleted() bool {
	return s._deleted
}

// Insert inserts the Storage to the database.
func (s *Storage) Insert(ctx context.Context, db DB) error {
	switch {
	case s._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case s._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.storage (` +
		`cid, user_id, name, public, local, local_path, hash, pinned, created_at, updated_at, deleted_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) RETURNING id`
	// run
	logf(sqlstr, s.Cid, s.UserID, s.Name, s.Public, s.Local, s.LocalPath, s.Hash, s.Pinned, s.CreatedAt, s.UpdatedAt, s.DeletedAt)
	if err := db.QueryRowContext(ctx, sqlstr, s.Cid, s.UserID, s.Name, s.Public, s.Local, s.LocalPath, s.Hash, s.Pinned, s.CreatedAt, s.UpdatedAt, s.DeletedAt).Scan(&s.ID); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Update updates a Storage in the database.
func (s *Storage) Update(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case s._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.storage SET ` +
		`cid = $1, user_id = $2, name = $3, public = $4, local = $5, local_path = $6, hash = $7, pinned = $8, created_at = $9, updated_at = $10, deleted_at = $11 ` +
		`WHERE id = $12`
	// run
	logf(sqlstr, s.Cid, s.UserID, s.Name, s.Public, s.Local, s.LocalPath, s.Hash, s.Pinned, s.CreatedAt, s.UpdatedAt, s.DeletedAt, s.ID)
	if _, err := db.ExecContext(ctx, sqlstr, s.Cid, s.UserID, s.Name, s.Public, s.Local, s.LocalPath, s.Hash, s.Pinned, s.CreatedAt, s.UpdatedAt, s.DeletedAt, s.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Storage to the database.
func (s *Storage) Save(ctx context.Context, db DB) error {
	if s.Exists() {
		return s.Update(ctx, db)
	}
	return s.Insert(ctx, db)
}

// Upsert performs an upsert for Storage.
func (s *Storage) Upsert(ctx context.Context, db DB) error {
	switch {
	case s._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.storage (` +
		`id, cid, user_id, name, public, local, local_path, hash, pinned, created_at, updated_at, deleted_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`cid = EXCLUDED.cid, user_id = EXCLUDED.user_id, name = EXCLUDED.name, public = EXCLUDED.public, local = EXCLUDED.local, local_path = EXCLUDED.local_path, hash = EXCLUDED.hash, pinned = EXCLUDED.pinned, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at, deleted_at = EXCLUDED.deleted_at `
	// run
	logf(sqlstr, s.ID, s.Cid, s.UserID, s.Name, s.Public, s.Local, s.LocalPath, s.Hash, s.Pinned, s.CreatedAt, s.UpdatedAt, s.DeletedAt)
	if _, err := db.ExecContext(ctx, sqlstr, s.ID, s.Cid, s.UserID, s.Name, s.Public, s.Local, s.LocalPath, s.Hash, s.Pinned, s.CreatedAt, s.UpdatedAt, s.DeletedAt); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Delete deletes the Storage from the database.
func (s *Storage) Delete(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return nil
	case s._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.storage ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, s.ID)
	if _, err := db.ExecContext(ctx, sqlstr, s.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	s._deleted = true
	return nil
}

// StorageByID retrieves a row from 'public.storage' as a Storage.
//
// Generated from index 'storage_pkey'.
func StorageByID(ctx context.Context, db DB, id int64) (*Storage, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, cid, user_id, name, public, local, local_path, hash, pinned, created_at, updated_at, deleted_at ` +
		`FROM public.storage ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	s := Storage{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&s.ID, &s.Cid, &s.UserID, &s.Name, &s.Public, &s.Local, &s.LocalPath, &s.Hash, &s.Pinned, &s.CreatedAt, &s.UpdatedAt, &s.DeletedAt); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}

// User returns the User associated with the Storage's (UserID).
//
// Generated from foreign key 'storage_user_id_fkey'.
func (s *Storage) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, s.UserID.Int64)
}
