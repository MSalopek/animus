package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

// Gateway represents a row from 'public.gateways'.
type Gateway struct {
	ID       int64         `json:"id"`        // id
	UserID   sql.NullInt64 `json:"user_id"`   // user_id
	Name     string        `json:"name"`      // name
	Slug     string        `json:"slug"`      // slug
	PublicID uuid.UUID     `json:"public_id"` // public_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Gateway exists in the database.
func (g *Gateway) Exists() bool {
	return g._exists
}

// Deleted returns true when the Gateway has been marked for deletion from
// the database.
func (g *Gateway) Deleted() bool {
	return g._deleted
}

// Insert inserts the Gateway to the database.
func (g *Gateway) Insert(ctx context.Context, db DB) error {
	switch {
	case g._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case g._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.gateways (` +
		`user_id, name, slug, public_id` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`
	// run
	logf(sqlstr, g.UserID, g.Name, g.Slug, g.PublicID)
	if err := db.QueryRowContext(ctx, sqlstr, g.UserID, g.Name, g.Slug, g.PublicID).Scan(&g.ID); err != nil {
		return logerror(err)
	}
	// set exists
	g._exists = true
	return nil
}

// Update updates a Gateway in the database.
func (g *Gateway) Update(ctx context.Context, db DB) error {
	switch {
	case !g._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case g._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.gateways SET ` +
		`user_id = $1, name = $2, slug = $3, public_id = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, g.UserID, g.Name, g.Slug, g.PublicID, g.ID)
	if _, err := db.ExecContext(ctx, sqlstr, g.UserID, g.Name, g.Slug, g.PublicID, g.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Gateway to the database.
func (g *Gateway) Save(ctx context.Context, db DB) error {
	if g.Exists() {
		return g.Update(ctx, db)
	}
	return g.Insert(ctx, db)
}

// Upsert performs an upsert for Gateway.
func (g *Gateway) Upsert(ctx context.Context, db DB) error {
	switch {
	case g._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.gateways (` +
		`id, user_id, name, slug, public_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`user_id = EXCLUDED.user_id, name = EXCLUDED.name, slug = EXCLUDED.slug, public_id = EXCLUDED.public_id `
	// run
	logf(sqlstr, g.ID, g.UserID, g.Name, g.Slug, g.PublicID)
	if _, err := db.ExecContext(ctx, sqlstr, g.ID, g.UserID, g.Name, g.Slug, g.PublicID); err != nil {
		return logerror(err)
	}
	// set exists
	g._exists = true
	return nil
}

// Delete deletes the Gateway from the database.
func (g *Gateway) Delete(ctx context.Context, db DB) error {
	switch {
	case !g._exists: // doesn't exist
		return nil
	case g._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.gateways ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, g.ID)
	if _, err := db.ExecContext(ctx, sqlstr, g.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	g._deleted = true
	return nil
}

// GatewayByID retrieves a row from 'public.gateways' as a Gateway.
//
// Generated from index 'gateways_pkey'.
func GatewayByID(ctx context.Context, db DB, id int64) (*Gateway, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, name, slug, public_id ` +
		`FROM public.gateways ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	g := Gateway{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&g.ID, &g.UserID, &g.Name, &g.Slug, &g.PublicID); err != nil {
		return nil, logerror(err)
	}
	return &g, nil
}

// User returns the User associated with the Gateway's (UserID).
//
// Generated from foreign key 'gateways_user_id_fkey'.
func (g *Gateway) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, g.UserID.Int64)
}
